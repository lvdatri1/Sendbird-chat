{"version":3,"sources":["MessListItem.js","App.js","serviceWorker.js","index.js"],"names":["MessListItem","_this$props","this","props","darker","message","timeReceived","imgSource","styleX","react_default","a","createElement","className","src","alt","Component","SB_APP_ID","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","txtName","txtChatID","txtChannel","avatar","txtMessage","openC","sb","SendBird","appId","messageList","onJoinAction","bind","assertThisInitialized","onJoinChannelAction","onSendMessage","onHandleChangeMessage","onHandleChatID","onHandleName","onHandleChangeChannel","event","setState","target","value","_this2","OpenChannel","getChannel","openChannel","error","enter","response","console","log","messList","createPreviousMessageListQuery","limit","reverse","load","messL","alert","_this3","sendUserMessage","_this4","connect","user","profileUrl","ChannelHandler","onMessageReceived","channel","newMess","concat","objectSpread","addChannelHandler","_this5","type","onChange","onClick","onKeyUp","keyCode","map","item","index","MessListItem_MessListItem","key","Date","createdAt","toLocaleString","_sender","userId","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa80cc1b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class MessListItem extends Component {\r\n\r\n    render() {\r\n        const { darker, message, timeReceived, imgSource } = this.props;\r\n        var styleX = 'container';\r\n        if (darker) styleX = \"darker container\"\r\n        return (\r\n            <div className={styleX}>\r\n                <img src={imgSource} alt=\"Avatar\" className={darker ? \"right\" : null} />\r\n                <p className={darker ? 'p-right' : null}>{message}</p>\r\n                <span className={darker ? \"time-left\" : \"time-right\"}>{timeReceived}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport * as SendBird from 'sendbird';\r\nimport MessageListItem from './MessListItem';\r\n\r\nconst SB_APP_ID = 'D0040096-E173-4232-A941-40ACA136FDF7';\r\nconst SB_CHANNEL = 'sendbird_open_channel_47637_cfac949ab329445335b69011724fac6549a9919d';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = ({\r\n      txtName: 'conkhi',\r\n      txtChatID: 'xyz123',\r\n      txtChannel: '1',\r\n      avatar: 'https://via.placeholder.com/150',\r\n      txtMessage: '',\r\n      openC: null,\r\n      sb: new SendBird({ appId: SB_APP_ID }),\r\n      messageList: [],\r\n    });\r\n    this.onJoinAction = this.onJoinAction.bind(this);\r\n    this.onJoinChannelAction = this.onJoinChannelAction.bind(this);\r\n    this.onSendMessage = this.onSendMessage.bind(this);\r\n    this.onHandleChangeMessage = this.onHandleChangeMessage.bind(this);\r\n    this.onHandleChatID = this.onHandleChatID.bind(this);\r\n    this.onHandleName = this.onHandleName.bind(this);\r\n    this.onHandleChangeChannel = this.onHandleChangeChannel.bind(this);\r\n  }\r\n  onHandleChangeMessage(event) {\r\n    this.setState({\r\n      txtMessage: event.target.value\r\n    });\r\n  }\r\n  onHandleChatID(event) {\r\n    this.setState({\r\n      txtChatID: event.target.value\r\n    });\r\n  }\r\n  onHandleChangeChannel(event) {\r\n    this.setState({\r\n      txtChannel: event.target.value\r\n    });\r\n  }\r\n  onHandleName(event) {\r\n    this.setState({\r\n      txtName: event.target.value\r\n    });\r\n  }\r\n  onJoinChannelAction() {\r\n    // alert('joined channel');\r\n\r\n    this.state.sb.OpenChannel.getChannel(SB_CHANNEL, (openChannel, error) => {\r\n      if (error) {\r\n        return;\r\n      }\r\n      this.setState({ openC: openChannel });\r\n      openChannel.enter((response, error) => {\r\n        if (error) {\r\n          return;\r\n        }\r\n        // alert('connected to defined channel');\r\n        console.log('channeld are in', response);\r\n\r\n\r\n      });\r\n      var messList = openChannel.createPreviousMessageListQuery();\r\n      messList.limit = 30;\r\n      messList.reverse = true;\r\n      messList.load((messL, error) => {\r\n        if (error) {\r\n          alert(error);\r\n          return;\r\n        }\r\n        console.log(messL);\r\n        this.setState({ messageList: messL });\r\n        console.log(this.state.messageList);\r\n      });\r\n\r\n      // openChannel.sendUserMessage('hello', 'DATA', 'CUSTOM_TYPE', function (message, error) {\r\n      //   if (error) {\r\n\r\n      //     return;\r\n      //   };\r\n      //   alert('sent');\r\n      //   console.log(message);\r\n      // });\r\n    });\r\n\r\n  }\r\n  componentDidMount() {\r\n  }\r\n  onSendMessage() {\r\n    this.state.openC.sendUserMessage(this.state.txtMessage, 'DATA', 'CUSTOM_TYPE', (message, error) => {\r\n      if (error) {\r\n\r\n        return;\r\n      };\r\n      // alert('sent');\r\n      this.setState({ txtMessage: '' });\r\n      console.log(message);\r\n      var messList = this.state.openC.createPreviousMessageListQuery();\r\n      messList.limit = 30;\r\n      messList.reverse = true;\r\n      messList.load((messL, error) => {\r\n        if (error) {\r\n          alert(error);\r\n          return;\r\n        }\r\n        console.log(messL);\r\n        this.setState({ messageList: messL });\r\n        console.log(this.state.messageList);\r\n\r\n      });\r\n\r\n    });\r\n\r\n  }\r\n  onJoinAction() {\r\n    // var sb = new SendBird({ appId: SB_APP_ID });\r\n    this.state.sb.connect(this.state.txtChatID, (user, error) => {\r\n      if (error) {\r\n        alert('error now');\r\n      }\r\n      // alert('connect is done');\r\n      console.log('our user is', user);\r\n      this.setState({ avatar: user.profileUrl });\r\n      var ChannelHandler = new this.state.sb.ChannelHandler();\r\n\r\n      ChannelHandler.onMessageReceived = (channel, message) => {\r\n        console.log(channel, message);\r\n\r\n        var newMess = [message].concat(this.state.messageList);\r\n\r\n        // this.state.messageList.push(message);\r\n        console.log(this.state.messageList);\r\n        this.setState({ ...this.state, messageList: newMess });\r\n      };\r\n\r\n      this.state.sb.addChannelHandler('channel1', ChannelHandler);\r\n\r\n    });\r\n    // alert('all are good at end');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div> hello world\r\n        <label>\r\n            chat ID:\r\n        </label>\r\n          <input type='text' value={this.state.txtChatID} onChange={this.onHandleChatID}></input>\r\n          <label>\r\n            name:\r\n        </label>\r\n          <input type='text' value={this.state.txtName} onChange={this.onHandleName}></input>\r\n          <button onClick={this.onJoinAction}>join</button>\r\n          <div>\r\n            <label>\r\n              Channel:\r\n        </label>\r\n            <input type='text' value={this.state.txtChannel} onChange={this.onHandleChangeChannel}></input>\r\n            <button onClick={this.onJoinChannelAction}>join channel</button>\r\n\r\n          </div>\r\n          <div>\r\n            <label>\r\n              Message:\r\n        </label>\r\n            <input type='text' value={this.state.txtMessage} onChange={this.onHandleChangeMessage} onKeyUp={(event) => {\r\n              if (event.keyCode === 13) {\r\n                this.onSendMessage();\r\n              }\r\n            }}></input>\r\n            <button onClick={this.onSendMessage}>send message</button>\r\n          </div>\r\n        </div>\r\n        <p>\r\n          <img src={this.state.avatar} alt='avatar' ></img>\r\n        </p>\r\n        <div>\r\n\r\n          {this.state.messageList.map((item, index) => {\r\n            return <MessageListItem\r\n              key={index}\r\n              message={item.message}\r\n              timeReceived={new Date(item.createdAt).toLocaleString('en-Us')}\r\n              imgSource={item._sender.profileUrl}\r\n              darker={item._sender.userId === this.state.txtChatID}\r\n            />\r\n          })}\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}